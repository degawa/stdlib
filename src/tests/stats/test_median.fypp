#:include "common.fypp"
#:set IR_KINDS_TYPES = INT_KINDS_TYPES + REAL_KINDS_TYPES
program test_median
    use stdlib_error, only: check
    use stdlib_kinds, only: sp, dp, qp, &
        int8, int16, int32, int64
    use stdlib_stats, only: median, mean
    use, intrinsic :: ieee_arithmetic, only : ieee_is_nan, ieee_value, ieee_quiet_nan
    implicit none
    real(sp), parameter :: sptol = 1000 * epsilon(1._sp)
    real(dp), parameter :: dptol = 2000 * epsilon(1._dp)
    real(qp), parameter :: qptol = 2000 * epsilon(1._qp)

    #:for k1,t1 in IR_KINDS_TYPES
    call test_median_${k1}$()
    #:endfor

contains

#:for k1,t1 in INT_KINDS_TYPES
subroutine test_median_${k1}$()
    ${t1}$, allocatable :: d0(:), d1(:), d2(:,:), d3(:,:,:)

    allocate(d0(0))
    !check just to be sure that the setup of d0 is correct
    call check(size(d0) == 0, 'test_median_${k1}$: should be of size 0')

    d1 = [10, 2, -3, -4, 6, -6, 7, -8, 9, 0, 1, 20]
    call check(mod(size(d1), 2) == 0, 'test_median_${k1}$: should be an even number')

    d2 = reshape(d1, [3, 4])
    call check(mod(size(d2), 2) == 0, 'test_median_${k1}$: should be an even number')

    d3 = reshape(d1, [2, 3, 2])
    call check(mod(size(d3), 2) == 0, 'test_median_${k1}$: should be an even number')

    !median_all
    call check( ieee_is_nan(median(d0)), '${k1}$ median(d0)' )
    call check( ieee_is_nan(median(d0, .false.)), '${k1}$ median(d0, .false.)' )
    call check( ieee_is_nan(median(d1, .false.)), '${k1}$ median(d1, .false.)' )
    call check( ieee_is_nan(median(d2, .false.)), '${k1}$ median(d2, .false.)' )
    call check( ieee_is_nan(median(d3, .false.)), '${k1}$ median(d3, .false.)' )

    call check( abs(median(d1) - 1.5_dp) < dptol, '${k1}$ median(d1), even')
    call check( abs(median(d2) - 1.5_dp) < dptol, '${k1}$ median(d2), even')
    call check( abs(median(d3) - 1.5_dp) < dptol, '${k1}$ median(d3), even')

    !median
    call check( ieee_is_nan(median(d0, 1)), '${k1}$ median(d0, 1)' )
    call check( ieee_is_nan(median(d0, 1, .false.)), '${k1}$ median(d0, 1, .false.)' )
    call check( ieee_is_nan(median(d1, 1, .false.)), '${k1}$ median(d1, 1, .false.)' )
    call check( any(ieee_is_nan(median(d2, 1, .false.))), '${k1}$ median(d2, 1, .false.)' )
    call check( any(ieee_is_nan(median(d2, 2, .false.))), '${k1}$ median(d2, 2, .false.)' )
    call check( any(ieee_is_nan(median(d3, 1, .false.))), '${k1}$ median(d3, 1, .false.)' )
    call check( any(ieee_is_nan(median(d3, 2, .false.))), '${k1}$ median(d3, 2, .false.)' )
    call check( any(ieee_is_nan(median(d3, 3, .false.))), '${k1}$ median(d3, 3, .false.)' )

    call check( abs(median(d1, 1) - 1.5_dp) < dptol, '${k1}$ median(d1, 1), even')
    call check( sum(abs(median(d2, 1) - [2._dp, -4._dp, 7._dp, 1._dp])) < dptol, &
                 '${k1}$ median(d2, 1)')
    call check( sum(abs(median(d2, 2) - [3.5_dp, 1.5_dp, 3._dp])) < dptol,       &
                 '${k1}$ median(d2, 2)')

    !median_mask_all
    call check( ieee_is_nan(median(d0, d0 > 0)), '${k1}$ median(d0, d0 > 0)' )
    call check( ieee_is_nan(median(d1, d1 > huge(d1))), '${k1}$ median(d1, d1 > huge(d1))' )
    call check( ieee_is_nan(median(d2, d2 > huge(d2))), '${k1}$ median(d2, d2 > huge(d2))' )
    call check( ieee_is_nan(median(d3, d3 > huge(d3))), '${k1}$ median(d3, d3 > huge(d3))' )
    call check( (median(d1, d1 > 0) - 7._dp) < dptol, '${k1}$ median(d1, d1 > 0)' ) 
    call check( (median(d2, d2 > 0) - 7._dp) < dptol, '${k1}$ median(d2, d2 > 0)' ) 
    call check( (median(d3, d3 > 0) - 7._dp) < dptol, '${k1}$ median(d3, d3 > 0)' ) 

    !median mask
    call check( ieee_is_nan(median(d0, 1, d0 > 0)), '${k1}$ median(d0, 1, d0 > 0)' )
    call check( ieee_is_nan(median(d1, 1, d1 > huge(d1))), '${k1}$ median(d1, 1, d1 > huge(d1))' )
    call check( any(ieee_is_nan(median(d2, 1, d2 > huge(d2)))), '${k1}$ median(d2, 1, d2 > huge(d2))' )
    call check( any(ieee_is_nan(median(d3, 1, d3 > huge(d3)))), '${k1}$ median(d3, 1, d3 > huge(d3))' )
    call check( (median(d1, 1, d1 > 0) - 7._dp) < dptol, '${k1}$ median(d1, 1, d1 >0)') 
    call check( sum(abs( (median(d2, 1, d2 > 0) - [ 6._dp, 6._dp, 8._dp, 10.5_dp] )  )) &
                 < dptol, '${k1}$ median(d2, 1, d2 > 0 )') 
    call check( sum(abs( (median(d2, 2, d2 > 0) - [ 8.5_dp, 2._dp, 14.5_dp] )  ))       &
                 < dptol, '${k1}$ median(d2, 2, d2 > 0 )') 
    call check( any(ieee_is_nan(median(d3, 1, d3 > 0))), '${k1}$ median(d3, 1, d3 > 0)')

    !odd number
    d1 = [d1, 20_${k1}$]
    call check(mod(size(d1), 2) == 1, 'test_median_${k1}$: should be an odd number')

    call check( abs(median(d1) - 2._dp) < dptol, '${k1}$ median(d1), odd')

    d2 = reshape(d1, [3, 5], pad = [0_${k1}$])
    call check(mod(size(d2), 2) == 1, 'test_median_${k1}$: should be an odd number')
    call check( abs(median(d2) - 1._dp) < dptol, '${k1}$ median(d2), odd')

    d3 = reshape(d1, [1, 3, 5], pad = [0_${k1}$])
    call check(mod(size(d3), 2) == 1, 'test_median_${k1}$: should be an odd number')
    call check( abs(median(d3) - 1._dp) < dptol, '${k1}$ median(d3), odd')

    call check( abs(median(d1, 1) - 2._dp) < dptol, '${k1}$ median(d1, 1)')
    call check( sum(abs(median(d2, 1) - [2._dp, -4._dp, 7._dp, 1._dp, 0._dp])) < dptol, &
                 '${k1}$ median(d2, 1), odd')
    call check( sum(abs(median(d2, 2) - [7._dp, 1._dp, 0._dp])) < dptol,                &
                 '${k1}$ median(d2, 2), odd')

end subroutine
#:endfor

#:for k1,t1 in REAL_KINDS_TYPES
subroutine test_median_${k1}$()
    ${t1}$, allocatable :: d0(:), d1(:), d2(:,:), d3(:,:,:)
    ${t1}$, allocatable :: tmp1(:)

    allocate(d0(0))
    !check just to be sure that the setup of d0 is correct
    call check(size(d0) == 0, 'test_median_${k1}$: should be of size 0')

    d1 = [10., 2., -3., -4., 6., -6., 7., -8., 9., 0., 1., 20.]
    call check(mod(size(d1), 2) == 0, 'test_median_${k1}$: should be an even number')

    d2 = reshape(d1, [3, 4])
    call check(mod(size(d2), 2) == 0, 'test_median_${k1}$: should be an even number')

    d3 = reshape(d1, [2, 3, 2])
    call check(mod(size(d3), 2) == 0, 'test_median_${k1}$: should be an even number')

    !median_all
    call check( ieee_is_nan(median(d0)), '${k1}$ median(d0)' )
    call check( ieee_is_nan(median(d0, .false.)), '${k1}$ median(d0, .false.)' )
    call check( ieee_is_nan(median(d1, .false.)), '${k1}$ median(d1, .false.)' )
    call check( ieee_is_nan(median(d2, .false.)), '${k1}$ median(d2, .false.)' )
    call check( ieee_is_nan(median(d3, .false.)), '${k1}$ median(d3, .false.)' )

    call check( abs(median(d1) - 1.5_${k1}$) < ${k1}$tol, '${k1}$ median(d1), even')
    call check( abs(median(d2) - 1.5_${k1}$) < ${k1}$tol, '${k1}$ median(d2), even')
    call check( abs(median(d3) - 1.5_${k1}$) < ${k1}$tol, '${k1}$ median(d3), even')

    !median
    call check( ieee_is_nan(median(d0, 1)), '${k1}$ median(d0, 1)' )
    call check( ieee_is_nan(median(d0, 1, .false.)), '${k1}$ median(d0, 1, .false.)' )
    call check( ieee_is_nan(median(d1, 1, .false.)), '${k1}$ median(d1, 1, .false.)' )
    call check( any(ieee_is_nan(median(d2, 1, .false.))), '${k1}$ median(d2, 1, .false.)' )
    call check( any(ieee_is_nan(median(d2, 2, .false.))), '${k1}$ median(d2, 2, .false.)' )
    call check( any(ieee_is_nan(median(d3, 1, .false.))), '${k1}$ median(d3, 1, .false.)' )
    call check( any(ieee_is_nan(median(d3, 2, .false.))), '${k1}$ median(d3, 2, .false.)' )
    call check( any(ieee_is_nan(median(d3, 3, .false.))), '${k1}$ median(d3, 3, .false.)' )

    call check( abs(median(d1, 1) - 1.5_${k1}$) < ${k1}$tol, '${k1}$ median(d1, 1), even')
    call check( sum(abs(median(d2, 1) - [2._${k1}$, -4._${k1}$, 7._${k1}$, 1._${k1}$])) < ${k1}$tol, &
                 '${k1}$ median(d2, 1)')
    call check( sum(abs(median(d2, 2) - [3.5_${k1}$, 1.5_${k1}$, 3._${k1}$])) < ${k1}$tol,       &
                 '${k1}$ median(d2, 2)')

    !median_mask_all
    call check( ieee_is_nan(median(d0, d0 > 0)), '${k1}$ median(d0, d0 > 0)' )
    call check( ieee_is_nan(median(d1, d1 > huge(d1))), '${k1}$ median(d1, d1 > huge(d1))' )
    call check( ieee_is_nan(median(d2, d2 > huge(d2))), '${k1}$ median(d2, d2 > huge(d2))' )
    call check( ieee_is_nan(median(d3, d3 > huge(d3))), '${k1}$ median(d3, d3 > huge(d3))' )
    call check( (median(d1, d1 > 0) - 7._${k1}$) < ${k1}$tol, '${k1}$ median(d1, d1 > 0)' ) 
    call check( (median(d2, d2 > 0) - 7._${k1}$) < ${k1}$tol, '${k1}$ median(d2, d2 > 0)' ) 
    call check( (median(d3, d3 > 0) - 7._${k1}$) < ${k1}$tol, '${k1}$ median(d3, d3 > 0)' ) 

    !median mask
    call check( ieee_is_nan(median(d0, 1, d0 > 0)), '${k1}$ median(d0, 1, d0 > 0)' )
    call check( ieee_is_nan(median(d1, 1, d1 > huge(d1))), '${k1}$ median(d1, 1, d1 > huge(d1))' )
    call check( any(ieee_is_nan(median(d2, 1, d2 > huge(d2)))), '${k1}$ median(d2, 1, d2 > huge(d2))' )
    call check( any(ieee_is_nan(median(d3, 1, d3 > huge(d3)))), '${k1}$ median(d3, 1, d3 > huge(d3))' )
    call check( (median(d1, 1, d1 > 0) - 7._${k1}$) < ${k1}$tol, '${k1}$ median(d1, 1, d1 >0)') 
    call check( sum(abs( (median(d2, 1, d2 > 0) - [ 6._${k1}$, 6._${k1}$, 8._${k1}$, 10.5_${k1}$] )  )) &
                 < ${k1}$tol, '${k1}$ median(d2, 1, d2 > 0 )') 
    call check( sum(abs( (median(d2, 2, d2 > 0) - [ 8.5_${k1}$, 2._${k1}$, 14.5_${k1}$] )  ))       &
                 < ${k1}$tol, '${k1}$ median(d2, 2, d2 > 0 )') 
    call check( any(ieee_is_nan(median(d3, 1, d3 > 0))), '${k1}$ median(d3, 1, d3 > 0)')

    !odd number
    d1 = [d1, 20._${k1}$]
    call check(mod(size(d1), 2) == 1, 'test_median_${k1}$: should be an odd number')

    call check( abs(median(d1) - 2._${k1}$) < ${k1}$tol, '${k1}$ median(d1), odd')

    d2 = reshape(d1, [3, 5], pad = [0._${k1}$])
    call check(mod(size(d2), 2) == 1, 'test_median_${k1}$: should be an odd number')
    call check( abs(median(d2) - 1._${k1}$) < ${k1}$tol, '${k1}$ median(d2), odd')

    d3 = reshape(d1, [1, 3, 5], pad = [0._${k1}$])
    call check(mod(size(d3), 2) == 1, 'test_median_${k1}$: should be an odd number')
    call check( abs(median(d3) - 1._${k1}$) < ${k1}$tol, '${k1}$ median(d3), odd')

    call check( abs(median(d1, 1) - 2._${k1}$) < ${k1}$tol, '${k1}$ median(d1, 1)')
    call check( sum(abs(median(d2, 1) - [2._${k1}$, -4._${k1}$, 7._${k1}$, 1._${k1}$, 0._${k1}$])) < ${k1}$tol, &
                 '${k1}$ median(d2, 1), odd')
    call check( sum(abs(median(d2, 2) - [7._${k1}$, 1._${k1}$, 0._${k1}$])) < ${k1}$tol,                &
                 '${k1}$ median(d2, 2), odd')

    !check IEEE NaN values in array
    d1(1) = ieee_value(1._${k1}$, ieee_quiet_nan)
    d2(1, 1) =  ieee_value(1._${k1}$, ieee_quiet_nan)
    d3(1, 1, 1) =  ieee_value(1._${k1}$, ieee_quiet_nan)

    !median_all
    call check( ieee_is_nan(median(d1)), '${k1}$ median(d1), should be NaN')
    call check( ieee_is_nan(median(d2)), '${k1}$ median(d2), should be NaN')
    call check( ieee_is_nan(median(d3)), '${k1}$ median(d3), should be NaN')

    !median
    call check( any(ieee_is_nan(median(d2, 1))), '${k1}$ median(d2, 1) should contain at least 1 NaN' )
    call check( any(ieee_is_nan(median(d2, 2))), '${k1}$ median(d2, 2) should contain at least 1 NaN' )

    call check( any(ieee_is_nan(median(d3, 1))), '${k1}$ median(d3, 1) should contain at least 1 NaN' )
    call check( any(ieee_is_nan(median(d3, 2))), '${k1}$ median(d3, 2) should contain at least 1 NaN' )
    call check( any(ieee_is_nan(median(d3, 3))), '${k1}$ median(d3, 3) should contain at least 1 NaN' )

    !median_mask_all
    call check( ieee_is_nan(median(d1, d1 > 0)), '${k1}$ median(d1, d1 > 0) should be NaN' )
    call check( ieee_is_nan(median(d2, d2 > 0)), '${k1}$ median(d2, d2 > 0) should be NaN' )
    call check( ieee_is_nan(median(d3, d3 > 0)), '${k1}$ median(d3, d3 > 0) should be NaN' )

    !median mask
    call check( ieee_is_nan(median(d1, 1, d1 .ne. 0)), '${k1}$ median(d1, 1, d1.ne.0) should return NaN')

    tmp1 = median(d2, 1, d2 .ne. 0)
    call check( any(ieee_is_nan(tmp1)), '${k1}$ median(d2, 1, d2 .ne. 0 ) should contain at least 1 NaN')
    call check( tmp1(2) == -4._${k1}$, '${k1}$ tmp1(2) == -4')
    call check( any(ieee_is_nan(median(d2, 2, d2 .ne. 0))),              &
       '${k1}$ median(d2, 2, d2 .ne. 0 ) should contain at least 1 NaN')

    call check( any(ieee_is_nan(median(d3, 1, d3 .ne. 0))),              &
       '${k1}$ median(d3, 1, d3 .ne. 0 ) should contain at least 1 NaN')

end subroutine
#:endfor



end program
